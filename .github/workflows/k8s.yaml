name: K8s AWS Stage Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Stage Enviroment deploy' 
        default: 'stage'
        required: true


jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:
    
    - name: Check out code
      uses: actions/checkout@v2
      with:
        ref: dev
        
    # render variables that exist on the secrets of the repository
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    #Login on ecr 
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    #Building and pushing images
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend
        IMAGE_TAG: d8x-frontend-stage-${{ github.sha }}
        REACT_APP_API_URL: 137::https://api.quantena.tech;80001::https://api.quantena.tech;1442::https://api.zktest.quantena.tech;default::https://api.quantena.tech
        REACT_APP_HISTORY_URL: default::https://history.api.quantena.tech
        REACT_APP_WEBSOCKET_URL: 137::wss://ws.quantena.tech/;80001::wss://ws.quantena.tech/;1442::wss://ws.zktest.quantena.tech/;default::wss://ws.quantena.tech/
        REACT_APP_CANDLES_WEBSOCKET_URL: default::wss://candles.testnet.quantena.tech/
      run: |
        docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg REACT_APP_API_URL=$REACT_APP_API_URL --build-arg REACT_APP_HISTORY_URL=$REACT_APP_HISTORY_URL --build-arg REACT_APP_CANDLES_WEBSOCKET_URL=$REACT_APP_CANDLES_WEBSOCKET_URL --build-arg REACT_APP_WEBSOCKET_URL=$REACT_APP_WEBSOCKET_URL .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:

    needs: build
    name: Deploy app to Kubernetes
    runs-on: ubuntu-latest
    steps:

      - name: checkout and pull tag version
        uses: actions/checkout@v2
        with:
          ref: dev
      #does not yet work here
      - id: get-tag-version
        run: |
          git fetch --prune --unshallow
          echo "TAG_VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

    #Checkout DevOps repo with PAT_TOKEN token that expires on 90days
      - name: Checkout DevOpsArgoCD
        uses: actions/checkout@v3
        with:
          repository: D8-X/devops
          token: ${{ secrets.PAT_TOKEN }}
    #Substitute the values on the service app
      - name: Render Deployment YAML
        uses: nowactions/envsubst@v1
        with:
          input: ./charts/frontend/d8x-frontend/versions.tpl
          output: ./charts/frontend/d8x-frontend/versions-stage.yaml
        env:
          IMAGE_VERSION: d8x-frontend-stage-${{ github.sha }}
          RELEASE_VERSION: ${{ env.TAG_VERSION }}

      - name: Push 
        run:  |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Image version stage ${{ github.sha }}"
          git push
